// src/lib/scct18.tsx
import React from 'react';
import { CctaReport, PlaqueVolumeMode } from '@/types/ccta';
import {
    getStenosisColor,
    getHrpColor,
    getCompositionColor,
    getLrncVolumeColor,
    getNcpVolumeColor,
    getCpVolumeColor,
    getPavColor
} from './thresholds';
import { pavStage } from '@/lib/compute';

const SEGMENT_COORDS: { [key: number]: string } = {
    1: "1776,681 1747,661 1718,640 1693,615 1668,598 1643,578 1630,540 1626,507 1618,470 1610,428 1601,391 1589,345 1576,307 1564,266 1547,224 1535,187 1518,149 1497,120 1481,87 1447,58 1464,104 1477,137 1489,170 1502,195 1510,220 1518,245 1526,270 1535,295 1543,328 1547,353 1556,378 1560,407 1564,432 1572,457 1572,482 1576,507 1576,532 1547,515 1518,499 1485,478 1456,457 1427,440 1389,424 1360,407 1323,391 1289,378 1256,370 1223,361 1190,353 1156,349 1123,345 1090,337 1052,332 1019,332 986,337 948,337 915,341 878,345 844,353 815,361 782,374 753,382 724,391 699,399 691,424 699,440 707,465 715,490 736,494 774,486 807,474 836,461 869,453 903,445 932,440 969,436 1011,432 1048,432 1081,432 1115,436 1148,445 1173,449 1206,457 1235,465 1269,478 1298,494 1327,507 1352,524 1373,536 1364,557 1343,582 1327,603 1306,627 1294,652 1273,673 1260,698 1248,723 1231,748 1219,773 1206,794 1198,819 1190,844 1181,873 1231,794 1260,752 1285,715 1310,686 1339,648 1373,623 1398,598 1431,569 1460,590 1489,607 1514,623 1543,644 1568,661 1589,677 1606,694 1622,711 1622,708 1626,708 1776,679",
    2: "266,939 287,906 324,914 358,927 395,939 428,952 466,968 503,985 541,998 574,1018 603,1031 628,1043 657,1060 682,1076 624,1014 595,993 566,973 536,956 507,935 474,914 441,898 412,881 378,869 353,856 329,844 349,819 370,794 391,769 416,744 449,715 474,690 499,665 524,644 553,619 578,599 603,578 628,557 653,540 678,528 703,507 724,499 690,407 665,420 636,432 607,449 578,466 553,486 520,507 487,528 453,557 416,590 383,623 353,653 329,682 304,707 279,740 258,769 237,786 216,815 204,840 183,869",
    3: "424,1687 387,1687 341,1679 295,1663 258,1642 225,1604 200,1571 183,1534 170,1492 162,1451 158,1413 158,1376 162,1334 162,1288 166,1251 170,1209 179,1172 187,1139 195,1101 208,1068 220,1031 233,998 262,943 183,873 166,902 150,935 133,968 121,1006 104,1043 96,1085 83,1131 79,1172 71,1214 71,1259 67,1297 67,1338 67,1380 71,1421 75,1459 79,1492 87,1534 104,1575 116,1609 137,1642 158,1675 183,1700 208,1725 241,1746 279,1762 316,1775 349,1779 387,1787",
    4: "387,1787 495,1775 536,1754 578,1733 620,1717 661,1696 703,1675 1244,1430 1206,1372 977,1480 890,1517 836,1542 778,1563 728,1584 678,1604 632,1621 591,1642 545,1658 503,1671 462,1683 424,1687",
    5: "2146,1494 2221,1365 2287,1378 2346,1382 2404,1390 2458,1394 2512,1394 2541,1399 2549,1507 2379,1548 2337,1523 2292,1515 2250,1503 2200,1503 2175,1498",
    6: "2549,1505 2616,1517 2678,1525 2741,1530 2799,1530 2861,1525 2928,1517 2986,1505 3053,1488 3111,1471 3169,1455 3232,1430 3215,1284 3186,1297 3177,1247 3169,1205 3165,1160 3161,1118 3157,1081 3148,1047 3136,1010 3123,977 3111,943 3103,914 3073,873 3073,910 3082,935 3090,964 3094,993 3098,1022 3103,1052 3107,1085 3111,1118 3115,1147 3115,1180 3119,1209 3119,1247 3119,1276 3123,1313 3098,1322 3069,1330 3036,1338 3003,1347 2970,1359 2932,1367 2899,1376 2857,1384 2820,1388 2782,1388 2745,1392 2707,1397 2670,1401 2633,1401 2595,1401 2566,1401 2541,1401",
    7: "3236,1426 3302,1401 3360,1376 3410,1355 3464,1330 3514,1309 3564,1284 3614,1251 3668,1222 3718,1189 3764,1151 3810,1122 3843,1093 3876,1064 3909,1039 3934,1014 3968,989 3860,860 3830,877 3801,902 3776,919 3751,935 3718,956 3714,919 3710,877 3710,835 3706,794 3701,756 3697,723 3693,694 3685,665 3672,636 3656,611 3668,682 3672,715 3672,744 3677,773 3677,802 3677,831 3677,860 3677,889 3677,919 3672,948 3668,977 3664,1006 3643,1027 3622,1043 3606,1064 3585,1081 3560,1097 3539,1114 3510,1131 3485,1147 3456,1168 3427,1180 3398,1197 3369,1209 3340,1226 3306,1243 3281,1255 3256,1268 3211,1284",
    8: "3864,858 3926,817 3988,771 4043,729 4097,692 4147,650 4201,613 4255,563 4309,517 4350,472 4392,434 4429,393 4454,355 4471,314 4467,285 4438,268 4400,260 4367,260 4334,260 4300,260 4271,264 4259,202 4284,197 4305,197 4334,197 4363,197 4388,197 4421,197 4458,202 4488,210 4512,222 4533,235 4546,256 4554,281 4554,310 4550,335 4542,364 4529,393 4512,422 4500,443 4483,468 4467,493 4446,522 4425,551 4404,576 4379,605 4354,630 4329,655 4305,680 4280,709 4242,738 4213,771 4176,804 4147,833 4117,858 4084,887 4051,912 4022,941 3997,966 3968,991",
    9: "3340,1475 3410,1438 3460,1471 3502,1505 3535,1534 3564,1563 3598,1592 3627,1625 3656,1658 3681,1692 3701,1725 3739,1800 3685,1742 3660,1717 3631,1687 3602,1663 3573,1633 3539,1609 3506,1588 3473,1563 3439,1538 3406,1521 3373,1492",
    10: "3851,1187 3914,1137 3959,1170 3993,1195 4026,1224 4059,1249 4092,1282 4122,1307 4147,1336 4167,1365 4188,1399 4209,1424 4226,1457 4255,1515 4188,1444 4159,1419 4134,1394 4105,1370 4076,1349 4051,1328 4022,1303 3988,1278 3959,1253 3926,1232 3889,1212",
    11: "2379,1548 2470,1586 2479,1640 2483,1681 2483,1727 2487,1769 2483,1806 2483,1856 2479,1889 2475,1914 2466,1947 2458,1976 2445,2005 2425,2080 2292,2039 2312,1993 2329,1947 2341,1906 2354,1860 2366,1814 2375,1764 2379,1714 2383,1669 2383,1627 2383,1586",
    12: "2450,2005 2487,2014 2529,2030 2566,2043 2599,2055 2633,2072 2666,2084 2703,2101 2728,2113 2766,2130 2803,2151 2841,2172 2874,2188 2915,2209 2945,2230 2978,2251 3011,2276 3040,2292 3069,2313 3103,2334 3132,2363 3161,2388 3186,2413 3211,2438 3232,2463 3269,2513 3240,2492 3182,2442 3140,2417 3107,2388 3073,2367 3040,2346 3007,2325 2965,2301 2928,2280 2895,2263 2861,2246 2824,2230 2787,2205 2749,2188 2712,2176 2670,2159 2633,2147 2599,2134 2566,2122 2537,2113 2504,2101 2470,2093 2425,2080",
    13: "2425,2080 2408,2118 2387,2159 2358,2197 2325,2238 2296,2271 2254,2305 2217,2334 2175,2367 2134,2396 2084,2417 2042,2438 1992,2454 1942,2471 1896,2483 1838,2500 1784,2508 1730,2517 1672,2525 1614,2529 1551,2533 1493,2533 1435,2529 1377,2521 1327,2508 1281,2500 1239,2488 1198,2475 1152,2454 1110,2434 1073,2413 1036,2392 1002,2363 965,2338 936,2309 907,2284 878,2259 853,2230 828,2205 803,2176 778,2147 757,2118 736,2089 711,2055 686,2018 665,1989 649,1960 632,1931 611,1897 578,1839 682,1847 686,1881 703,1914 715,1947 736,1972 757,2001 778,2030 803,2064 832,2101 857,2134 886,2163 915,2188 944,2217 973,2246 1002,2276 1040,2301 1077,2325 1106,2342 1135,2363 1173,2384 1210,2400 1244,2413 1277,2425 1310,2429 1339,2438 1385,2446 1422,2454 1460,2454 1501,2454 1539,2458 1576,2454 1618,2454 1668,2450 1713,2442 1763,2434 1813,2421 1863,2404 1909,2384 1959,2371 2005,2346 2050,2321 2092,2292 2129,2263 2158,2230 2183,2201 2208,2176 2229,2151 2250,2122 2262,2093 2279,2068 2292,2039",
    14: "2283,2419 2371,2440 2450,2473 2529,2506 2599,2531 2662,2564 2732,2598 2787,2623 2845,2660 2907,2697 2957,2731 3011,2768 3136,2860 3107,2822 3082,2789 3053,2760 3019,2735 2986,2706 2949,2677 2907,2648 2861,2618 2820,2589 2778,2564 2732,2535 2687,2510 2637,2485 2591,2469 2545,2448 2495,2423 2445,2402 2400,2386 2341,2365",
    15: "566,1814 678,1748 765,1694 848,1648 932,1611 990,1586 1052,1557 1115,1527 1173,1498 1264,1461 1298,1515 1256,1540 1206,1561 1152,1586 1098,1611 1044,1636 994,1660 948,1681 898,1706 848,1731 803,1752 765,1773 724,1798 686,1847 582,1839",
    16: "383,1791 832,2490 873,2548 915,2602 965,2643 1002,2681 1044,2710 1094,2739 1144,2760 1189,2776 1239,2789 1289,2797 1339,2797 1389,2789 1422,2785 1468,2776 1510,2768 1547,2756 1580,2743 1639,2710 1614,2635 1585,2656 1551,2673 1510,2685 1468,2697 1422,2702 1381,2706 1339,2710 1298,2710 1248,2702 1202,2689 1160,2673 1123,2652 1090,2627 1056,2602 1023,2569 994,2540 965,2510 944,2477 919,2448 894,2411 873,2377 844,2336 823,2303 798,2269 774,2236 757,2199 736,2161 715,2128 690,2091 665,2057 645,2020 624,1987 603,1958 574,1916 557,1875 532,1833 512,1800 491,1775",
    17: "2470,1584 3061,1887 3302,2012 3456,2099 3610,2199 3764,2303 3884,2390 3988,2465 4217,2648 4163,2577 4101,2506 4047,2456 3988,2411 3926,2357 3855,2303 3785,2249 3722,2203 3656,2153 3589,2107 3523,2057 3456,2012 3390,1970 3315,1924 3240,1879 3161,1837 3094,1800 3019,1754 2945,1717 2870,1671 2787,1629 2724,1596 2662,1563 2558,1509 2379,1542",
    18: "986,2165 998,2103 1023,2057 1056,2016 1094,1970 1131,1937 1202,1887 1160,1879 1119,1895 1085,1916 1056,1941 1027,1974 1002,2008 981,2037 961,2066 948,2091 932,2124",
};

interface SCCT18_SVG_Props {
    report: CctaReport;
    mode: "Stenosis" | "HRP" | "Composition" | "Burden";
    compositionSubMode?: PlaqueVolumeMode;
    onSegmentHover: (segId: number, event: React.MouseEvent) => void;
    onSegmentLeave: () => void;
}

export const SCCT18_SVG: React.FC<SCCT18_SVG_Props> = ({ report, mode, compositionSubMode, onSegmentHover, onSegmentLeave }) => {
    const allSegments = report.vessels.flatMap(v => v.segments);

    return (
        <svg
            viewBox="0 0 4600 2800"
            style={{ width: '100%', height: 'auto', backgroundColor: 'transparent' }}
        >
            <g transform="translate(155, 0) scale(0.9125)">
                {Object.entries(SEGMENT_COORDS).map(([key, rawPoints]) => {
                    const segId = parseInt(key);
                    const segmentData = allSegments.find(s => s.segId === segId);
                    
                    let fillColor = `var(--risk-neutral-gray)`;
                    let isPlaquePresent = false;

                    if (mode === 'Stenosis') {
                        const stenosisPct = segmentData?.stenosis_pct ?? 0;
                        fillColor = `var(${getStenosisColor(stenosisPct)})`;
                        isPlaquePresent = stenosisPct > 0;
                    } else if (mode === 'HRP') {
                        const hrpCount = segmentData?.hrp?.length ?? 0;
                        fillColor = `var(${getHrpColor(hrpCount)})`;
                        isPlaquePresent = hrpCount > 0;
                    } else if (mode === 'Composition') {
                        const ncp = segmentData?.ncp_mm3 ?? 0;
                        const cp = segmentData?.cp_mm3 ?? 0;
                        const lrnc = segmentData?.lrnc_mm3 ?? 0;
                        isPlaquePresent = (ncp > 0 || cp > 0 || lrnc > 0);

                        if (compositionSubMode === 'LRNC_Volume') {
                            fillColor = `var(${getLrncVolumeColor(lrnc)})`;
                        } else if (compositionSubMode === 'NCP_Volume') {
                            fillColor = `var(${getNcpVolumeColor(ncp)})`;
                        } else if (compositionSubMode === 'CP_Volume') {
                            fillColor = `var(${getCpVolumeColor(cp)})`;
                        } else {
                            fillColor = `var(${getCompositionColor(ncp, cp)})`;
                        }
                    } else if (mode === 'Burden') {
                        const pav = segmentData?.pav_pct ?? 0;
                        const stage = pavStage(pav);
                        isPlaquePresent = stage > 0;
                        if (isPlaquePresent) {
                            fillColor = `var(${getPavColor(pav)})`;
                        }
                    }

                    const points = rawPoints.replace(/,/g, ' ');
                    
                    return (
                        <polygon
                            key={segId}
                            points={points}
                            fill={fillColor}
                            fillOpacity={0.75}
                            stroke={'var(--ink)'}
                            strokeOpacity={0.1}
                            strokeWidth={5}
                            onMouseEnter={(event) => onSegmentHover(segId, event)}
                            onMouseLeave={onSegmentLeave}
                            style={{ cursor: 'pointer', transition: 'fill-opacity 0.2s ease' }}
                            onMouseOver={(e) => e.currentTarget.style.fillOpacity = '1'}
                            onMouseOut={(e) => e.currentTarget.style.fillOpacity = '0.75'}
                        />
                    );
                })}
            </g>
        </svg>
    );
};